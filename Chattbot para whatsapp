{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of API-dialogflow-deploy-web-whatsapp.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "7e9KqIU5VfFU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# download em https://chromedriver.chromium.org/downloads\n",
        "from selenium import webdriver\n",
        "from selenium.webdriver.chrome.options import Options\n",
        "import os\n",
        "from selenium.webdriver.common.keys import Keys\n",
        "from selenium.webdriver.common.action_chains import ActionChains\n",
        "import time\n",
        "from chatterbot import ChatBot\n",
        "from chatterbot.trainers import ChatterBotCorpusTrainer\n",
        "from chatterbot.trainers import ListTrainer\n",
        "import requests\n",
        "import json\n",
        "import random\n",
        "import wikipedia\n",
        "wikipedia.set_lang('pt')\n",
        "import pyautogui\n",
        "import dialogflow\n",
        "\n",
        "def inbox():\n",
        "\ttry:\n",
        "\t\tvd = pyautogui.locateCenterOnScreen(r'find.bmp')\n",
        "\t\tpyautogui.click(vd[0]-10,vd[1])\n",
        "\texcept Exception as ex:\n",
        "\t\tprint(ex)\n",
        "\t\tpass\n",
        "\n",
        "\n",
        "chatbot = ChatBot('Clinica')\n",
        "trainer = ChatterBotCorpusTrainer(chatbot)\n",
        "trainer.train('chatterbot.corpus.portuguese')\n",
        "trainerer = ListTrainer(chatbot)\n",
        "\n",
        "dir_path = os.getcwd()\n",
        "\n",
        "chrome_options2 = Options()\n",
        "chrome_options2.add_argument(r\"user-data-dir=\"+dir_path+\"/profile/wpp\")\n",
        "\n",
        "driver = webdriver.Chrome(dir_path+'/chromedriver.exe',chrome_options=chrome_options2)\n",
        "driver.get('https://web.whatsapp.com/')\n",
        "driver.implicitly_wait(15)\n",
        "\n",
        "ss = random.randrange(0,10000)\n",
        "\n",
        "def dialog(project_id, session_id, texts, language_code):\n",
        "    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = \"C:/Users/seu-user/Downloads/chave-da-conta-de-serviço.json\"\n",
        "    session_client = dialogflow.SessionsClient()\n",
        "    session = session_client.session_path(project_id, session_id)\n",
        "    print('Session path: {}\\n'.format(session))\n",
        "    for text in texts:\n",
        "        text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n",
        "        query_input = dialogflow.types.QueryInput(text=text_input)\n",
        "        resposta = session_client.detect_intent(session=session, query_input=query_input)\n",
        "        print('=' * 20)\n",
        "        print('Query text: {}'.format(resposta.query_result.query_text))\n",
        "        print('Detected intent: {} (confidence: {})\\n'.format(resposta.query_result.intent.display_name,resposta.query_result.intent_detection_confidence))\n",
        "        print('Fulfillment text: {}\\n'.format(resposta.query_result.fulfillment_text))\n",
        "        enviaMensagem(resposta.query_result.fulfillment_text)\n",
        "\n",
        "def pegaConversa():\n",
        "\ttry:\n",
        "\t\tpost = driver.find_elements_by_class_name('_12pGw')  \n",
        "\t\tultimo = len(post) - 1\n",
        "\t\ttexto = post[ultimo].find_element_by_css_selector('span.selectable-text').text\n",
        "\t\treturn texto\n",
        "\texcept:\n",
        "\t\tpass\n",
        "\n",
        "def enviaMensagem(mensagem):\n",
        "\tcaixa_de_texto = driver.find_element_by_class_name(\"_3u328\")\n",
        "\tvalor = '*Anita:* '+str(mensagem)\n",
        "\tfor part in valor.split('\\n'):\n",
        "\t\tcaixa_de_texto.send_keys(part)\n",
        "\t\tActionChains(driver).key_down(Keys.SHIFT).key_down(Keys.ENTER).key_up(Keys.SHIFT).perform()\n",
        "\ttime.sleep(0.5)\n",
        "\tbotao_enviar = driver.find_element_by_class_name('_3M-N-')\n",
        "\tbotao_enviar.click()\n",
        "\n",
        "def treinar(mensagem):\n",
        "\tresposta = \"Como respondo isso? me ensine com *;texto com a resposta* ou *!* para desativar o aprendizado para:\" + str(mensagem)\n",
        "\tenviaMensagem(resposta)\n",
        "\tnovo = []\n",
        "\ttry:\n",
        "\t\twhile True:\n",
        "\t\t\tultima = pegaConversa()\n",
        "\t\t\tif ultima == \"!\":\n",
        "\t\t\t\tenviaMensagem(\"Você desativou meu aprendizado.\")\n",
        "\t\t\t\tbreak\n",
        "\t\t\telif ultima.replace(\";\",\"\") != \"\" and ultima != mensagem and ultima[0] == \";\":\n",
        "\t\t\t\tauxiliar = ultima\n",
        "\t\t\t\tnovo.append(mensagem.lower().strip())\n",
        "\t\t\t\tnovo.append(ultima.replace(\";\",\"\").strip())\n",
        "\t\t\t\ttrainerer.train(novo)\n",
        "\t\t\t\tprint(mensagem.lower().strip())\n",
        "\t\t\t\tprint(ultima.replace(\";\",\"\").strip())\n",
        "\t\t\t\tenviaMensagem(\"Pronto, aprendizado realizado com sucesso. Obrigada.\")\n",
        "\t\t\t\tbreak\n",
        "\texcept:\n",
        "\t\tpass\n",
        "\n",
        "def dolar():\n",
        "\ttry:\n",
        "\t\trequsd = requests.get(\"https://economia.awesomeapi.com.br/all\")\n",
        "\t\tmoedas = json.loads(requsd.text)\n",
        "\t\tusd = moedas['USD']['high']\n",
        "\t\tmensagem = \"Dólar agora: R${:.4}\".format(usd)\n",
        "\t\tenviaMensagem(mensagem)\n",
        "\texcept:\n",
        "\t\tenviaMensagem(\"Agora não...\")\n",
        "\t\tpass\n",
        "\n",
        "def tempo():\n",
        "\ttry:\n",
        "\t\t#descoberta cidade\n",
        "\t\tcidade = str(pegaConversa().lower().strip()[6:]) #tempo sãopaulo\n",
        "\t\tcity = requests.get(f'http://apiadvisor.climatempo.com.br/api/v1/locale/city?name={cidade}&token=d6c96a7e25ec95c1e4121b4accab29d7')\n",
        "\t\tcity2 = json.loads(city.text)\n",
        "\t\tprint(city2)\n",
        "\t\tidd = city2[0]['id']\n",
        "\t\tmunicipio = city2[0]['name']\n",
        "\t\testado = city2[0]['state']\n",
        "\t\t#fazer consulta com id tempo agora\n",
        "\t\tcity3 = requests.get(f'http://apiadvisor.climatempo.com.br/api/v1/weather/locale/{idd}/current?token=d6c96a7e25ec95c1e4121b4accab29d7')\n",
        "\t\tcity4 = json.loads(city3.text)\n",
        "\t\tprint(city4)\n",
        "\t\ttemperatura = city4['data']['temperature']\n",
        "\t\tcond = city4['data']['condition']\n",
        "\t\tmensagem = f'Tempo Agora para: *{municipio}-{estado}*\\n{temperatura} Cº, {cond}'\n",
        "\t\tenviaMensagem(mensagem)\n",
        "\texcept:\n",
        "\t\tmensagem = 'Da próxima vez tente: *\"tempo +cidade brasileira\"*'\n",
        "\t\tenviaMensagem(mensagem)\n",
        "\n",
        "def noticias():\n",
        "\ttry:\n",
        "\t\treq = requests.get('https://newsapi.org/v2/top-headlines?country=br&category=technology&apiKey=be8e91e06d5b42ccbcb887ccbfb001f5')\n",
        "\t\tnoticias = json.loads(req.text)\n",
        "\t\tfor news in noticias['articles']:\n",
        "\t\t\ttitulo = news['title']\n",
        "\t\t\tlink = news['url']\n",
        "\t\t\tdesc = news['description']\n",
        "\t\t\tmensagem = \"{}\\n{}\\n{}\".format(titulo,desc,link)\n",
        "\t\t\tenviaMensagem(mensagem)\n",
        "\t\t\ttime.sleep(random.randrange(6/15)/10)\n",
        "\texcept:\n",
        "\t\tenviaMensagem(\"agora não...\")\n",
        "\t\tpass\n",
        "\n",
        "\n",
        "salva = pegaConversa()\n",
        "\n",
        "while True:\n",
        "\ttry:\n",
        "\t\tinbox()\n",
        "\t\tpass\n",
        "\t\tif pegaConversa() != '' and pegaConversa()[:7] != \"Anita: \" and pegaConversa() != salva and pegaConversa().strip() != \"!\" and pegaConversa().strip() != \";\" and pegaConversa().strip().lower() != 'dolar' and pegaConversa().strip().lower() != 'dólar' and pegaConversa().lower().strip()[0:6] != 'tempo' and pegaConversa().strip().lower() != 'noticias' and pegaConversa().strip().lower() != 'notícias' and pegaConversa().strip().lower()[0:2] != 'w:':\n",
        "\t\t\tdialog('seu-project-id',ss,[pegaConversa()],'pt-BR')\n",
        "\t\t\t#texto = str(pegaConversa().lower().strip())\n",
        "\t\t\t#response = chatbot.get_response(texto)\n",
        "\t\t\t#if float(response.confidence) < 0.5:\n",
        "\t\t\t\t#treinar(pegaConversa())\n",
        "\t\t\t#else:\n",
        "\t\t\t\t#enviaMensagem(response)\n",
        "\t\telif pegaConversa().strip().lower() == 'dolar' or pegaConversa().strip().lower() == 'dólar':\n",
        "\t\t\tdolar()\n",
        "\t\telif pegaConversa().lower().strip()[0:5] == 'tempo':\n",
        "\t\t\ttempo()\n",
        "\t\telif pegaConversa().strip().lower() == 'noticias' or pegaConversa().strip().lower() == 'notícias':\n",
        "\t\t\tnoticias()\n",
        "\t\telif pegaConversa().strip().lower()[0:2] == 'w:':\n",
        "\t\t\ttry:\n",
        "\t\t\t\tbusca = str(pegaConversa().strip().lower()[2:])\n",
        "\t\t\t\tmensagem = '{}'.format(wikipedia.summary(busca))\n",
        "\t\t\t\tenviaMensagem(mensagem)\n",
        "\t\t\texcept:\n",
        "\t\t\t\tenviaMensagem('Não encontrei nada relevante para \"{}\" na Wikipedia em português.'.format(busca))\n",
        "\t\telse:\n",
        "\t\t\tpass\n",
        "\texcept:\n",
        "\t\tpass\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}